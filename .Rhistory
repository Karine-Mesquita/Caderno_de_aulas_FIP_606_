library(DHARMa)
simulateResiduals(m_campo)
plot(simulateResiduals(m_campo))
library(emmeans)
#teste de comparação multipla
library(multcomp)
cld(means_campo)
pwpp(means_campo)
library(agricolae)
cv.model(m_campo)
#script limpo
m_campo <- lm(log(FER) ~ BLOCO + TRAT, data = campo)
anova (m_campo)
library(DHARMa)
simulateResiduals(m_campo)
plot(simulateResiduals(m_campo))
library(emmeans)
means_campo <- emmeans(m_campo, ~TRAT, type = "response")
means_campo
plot(means_campo)
#teste de comparação multipla
library(multcomp)
cld(means_campo)
pwpp(means_campo)
library(agricolae)
cv.model(m_campo)
gsheet2tbl("https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=866852711#gid=866852711")
library(gsheet)
library(ggplot2)
library(readxl)
library(tidyverse)
library(Hmisc)
gsheet2tbl("https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=866852711#gid=866852711")
campo <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=866852711#gid=866852711")
campo
campo |>
ggplot(aes(TRAT, PROD))+
geom_jitter(width = 0.1)+
stat_summary(
fun.data = "mean_cl_boot",
colour = "magenta", width = 0.3)
campo |>
mutate (TRAT = factor(TRAT)) |>
ggplot(aes(TRAT, PROD))+
geom_jitter(width = 0.2)+
stat_summary(
fun.data = "mean_cl_boot", #dá a média dos dados no gráfico
colour = "red", width = 0.3
)
campo$TRAT <- factor(campo$TRAT)
campo$BLOCO <- factor(campo$BLOCO)
#Anova
m_campo <- lm(PROD ~ BLOCO + TRAT, data = campo)
anova (m_campo)
plot(m_campo)
plot(m_campo)
library(emmeans)
#verificar os pressuposto de normalidade
library(DHARMa)
simulateResiduals(m_campo)
plot(simulateResiduals(m_campo))
library(emmeans)
#verificar os pressuposto de normalidade
library(DHARMa)
simulateResiduals(m_campo)
plot(simulateResiduals(m_campo))
library(emmeans)
means_campo <- emmeans(m_campo, ~TRAT)
means_campo
plot(means_campo)
library(emmeans)
means_campo <- emmeans(m_campo, ~TRAT)
means_campo
plot(means_campo)
library(emmeans)
means_campo <- emmeans(m_campo, ~TRAT)
means_campo
plot(means_campo)
#teste de comparação multipla
library(multcomp)
cld(means_campo)
plot(means_campo)
pwpp(means_campo)
cld(means_campo)
pwpp(means_campo)
pwpp(means_campo)
pwpp(means_campo)
pwpp(means_campo)
pwpm(means_campo)
#para ferrugem
#Anova
f_campo <- lm(FER ~ BLOCO + TRAT, data = campo)
anova (m_campo)
#teste de pressupostos de homogeneidade e normalidade
plot(simulateResiduals(f_campo))
f_campo_t <- lm(log(FER) ~ BLOCO + TRAT, data = campo)
anova (f_campo_t)
means_campo <- emmeans(m_campo, ~TRAT, type = "response")
means_campo
means_f_campo_t <- emmeans(f_campo_t, ~TRAT, type = "response")
#utiliza-se a função type = response para sinalizar que os dados foram transformados, mas que os resultados devem ser retornados em valores reais
means_campo_f_campo_t
#utiliza-se a função type = response para sinalizar que os dados foram transformados, mas que os resultados devem ser retornados em valores reais
means_f_campo_t
plot(means_campo)
library(DHARMa)
simulateResiduals(m_campo)
plot(simulateResiduals(m_campo))
library(emmeans)
#teste de comparação multipla
library(multcomp)
plot(means_f_campo_t)
simulateResiduals(means_f_campo_t)
plot(simulateResiduals(means_f_campo_t))
#utiliza-se a função type = response para sinalizar que os dados foram transformados, mas que os resultados devem ser retornados em valores reais
means_f_campo_t
plot(means_f_campo_t)
library(DHARMa)
simulateResiduals(means_f_campo_t)
anova (f_campo)
#para ferrugem
#Anova
f_campo <- lm(FER ~ BLOCO + TRAT, data = campo)
anova (f_campo)
#teste de pressupostos de homogeneidade e normalidade
plot(simulateResiduals(f_campo))
f_campo_t <- lm(log(FER) ~ BLOCO + TRAT, data = campo)
anova (f_campo_t)
means_f_campo_t <- emmeans(f_campo_t, ~TRAT, type = "response")
#utiliza-se a função type = response para sinalizar que os dados foram transformados, mas que os resultados devem ser retornados em valores reais
means_f_campo_t
plot(means_f_campo_t)
library(DHARMa)
simulateResiduals(means_f_campo_t)
#utiliza-se a função type = response para sinalizar que os dados foram transformados, mas que os resultados devem ser retornados em valores reais
means_f_campo_t
plot(means_f_campo_t)
library(DHARMa)
simulateResiduals(means_f_campo_t)
#teste de pressupostos de homogeneidade e normalidade
plot(simulateResiduals(f_campo))
f_campo <- lm(log(FER) ~ BLOCO + TRAT, data = campo)
anova (f_campo_t)
anova (f_campo)
f_campo <- lm(log(FER) ~ BLOCO + TRAT, data = campo)
anova (f_campo)
means_f_campo <- emmeans(f_campo, ~TRAT, type = "response")
#utiliza-se a função type = response para sinalizar que os dados foram transformados, mas que os resultados devem ser retornados em valores reais
means_f_campo
plot(means_f_campo)
#teste de comparação multipla
library(emmeans)
#teste de comparação multipla
library(multcomp)
cld(means_f_campo)
cld(means_f_campo, Letters = letters)
#adicionar o comando Letters = letters, retorna letras ao invés de números no resultado do teste de médias
pwpp(means_f_campo)
pwpm(means_f_campo)
library(agricolae)
cv.model(means_f_campo)
library(agricolae)
cv.model(means_f_campo)
cv.model(f_campo)
gsheet2tbl("https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=1345524759#gid=1345524759")
milho <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=1345524759#gid=1345524759")
milho
milho |>
ggplot(aes(hybrid, index, color = method))+
geom_jitter(width = 0.1)+
coord_flip()+
facet_wrap(~ method)
#para modelos mistos (introduzir fator aleatório no modelo) deve ser utilizado o pacote lme4.
#install.packages("lme4")
library(lme4)
library(dplyr)
milho$hybrid_block <- interaction(milho$hybrid, milho$block)
car::Anova(m_milho)
milho$hybrid_block <- interaction(milho$hybrid, milho$block)
milho |>
mutate(hybrid_block = interaction(hybrid, block))
m_milho <- lmer(index ~hybrid*method+
(1 | block:hybrid_block), data = milho)
car::Anova(m_milho)
#modelo misto
m_milho <- lmer(index ~ hybrid*method+
(1 | block:hybrid_block), data = milho)
car::Anova(m_milho)
plot(simulateResiduals(m_milho))
media_milho <- emmeans(m_milho, ~ hybrid | method)
media_milho
cld(media_milho, Letters = letters)
plot(simulateResiduals(m_milho))
media_milho <- emmeans(m_milho, ~ method | hybrid)
media_milho
cld(media_milho, Letters = letters)
m_milho2 <- lmer(yeld ~hybrid*method+
(1 | block:hybrid_block), data = milho)
m_milho2 <- lmer(yield ~hybrid*method+
(1 | block:hybrid_block), data = milho)
car::Anova(m_milho)
plotSimulatedResiduals(m_milho)
#relação yeld e index
milho |>
ggplot(aes(index, yield))+
geom_point()+
geom_smooth(method = "lm")
media_milho <- emmeans(m_milho, ~ hybrid | method)
cld(media_milho, Letters = letters)
media_milho2 <- emmeans(m_milho, ~ method | hybrid)
cld(media_milho2, Letters = letters)
#relação yeld e index
milho |>
ggplot(aes(index, yield))+
geom_point()+
geom_smooth(method = "lm")
#para análise de correlação
cor.test(milho$index, milho$yield)
cor1 <- cor(milho$index, milho$yield)
cor1*cor1*100
#acima, duas maneiras de  determinar o coeficiente de correlação
cor1*cor1*100
#install.packages("MASS")
library(MASS)
m1 <- lm(count ~spray, data = insects)
insects <- InsectSprays
m1 <- lm(count ~spray, data = insects)
library(DHARMa)
library(DHARMa)
plot(simulateResiduals(m1))
m1 <- lm(count ~spray, data = insects)
library(DHARMa)
plot(simulateResiduals(m1))
plot(simulateResiduals(m1))
m1 <- lm(count ~spray, data = insects)
plot(simulateResiduals(m1))
m1 <- sqrt(count ~ spray, data = insects)
m1 <- lm(count ~spray, data = insects)
library(DHARMa)
plot(simulateResiduals(m1))
m1 <- sqrt(count ~ spray, data = insects)
m1 <- lm(sqrt(count) ~ spray, data = insects)
m1
library(DHARMa)
plot(simulateResiduals(m1))
#transformado
m1 <- lm(count2 ~ spray, data = insects)
#transformado
m1 <- lm(log(count + 1) ~ spray, data = insects)  # +1 para evitar log(0), caso tenha valores zero
m1
library(DHARMa)
plot(simulateResiduals(m1))
boxcox(lm(insects$count+0.1 ~ 1))
b <- boxcox(lm(insects$count+0.1 ~ 1))
lambda <- b$x[which.max(b$y)]
lambda
library(tidyverse)
insects <- insects |>
mutate(count2 = (count^lambda-1)/lambda)
mutate(count3 = sqrt(count))
insects <- insects |>
mutate(count = (count^lambda-1)/lambda)
mutate(count3 = sqrt(count))
insects <- insects |>
mutate(count = (count^lambda-1)/lambda)
mutate(count = sqrt(count))
# Aplicar a transformação Box-Cox
insects <- insects %>%
mutate(
count_bc = if (lambda == 0) log(count + 0.1) else ((count + 0.1)^lambda - 1) / lambda
)
# Visualizar a distribuição transformada
hist(insects$count_bc, main = "Histograma - Box-Cox", xlab = "count_bc")
#Transformação por log (com +1 para evitar log(0))
m1_log <- lm(log(count + 1) ~ spray, data = insects)
m1
library(DHARMa)
plot(simulateResiduals(m1))
#Transformação por log (com +1 para evitar log(0))
m1_log <- lm(log(count + 1) ~ spray, data = insects)
plot(simulateResiduals(m1_log))
#Transformação por log (com +1 para evitar log(0))
m1_log <- lm(log(count + 1) ~ spray, data = insects)  # +1 para evitar log(0), caso tenha valores zero
m1
m1_log
plot(simulateResiduals(m1_log))
# Transformação Box-Cox (modelo sem preditores, apenas intercepto)
boxcox(lm(count + 0.1 ~ 1, data = insects))  # Gráfico
# Instalar e carregar pacotes
#install.packages("MASS")  # apenas se ainda não tiver
library(MASS)
library(DHARMa)
library(tidyverse)
# Dados
insects <- InsectSprays
# Box-Cox para estimar lambda ideal
b <- boxcox(lm(count + 0.1 ~ 1, data = insects))  # modelo nulo (intercepto)
lambda <- b$x[which.max(b$y)]
lambda  # salvar valor ótimo de lambda
# Aplicar transformação Box-Cox
insects <- insects %>%
mutate(
count_bc = if (lambda == 0) log(count + 0.1) else ((count + 0.1)^lambda - 1) / lambda
)
# Modelo com variável transformada
modelo_bc <- lm(count_bc ~ spray, data = insects)
# Diagnóstico
plot(simulateResiduals(modelo_bc))
# Visualizar distribuição transformada
hist(insects$count_bc, main = "Histograma - Box-Cox", xlab = "count_bc")
#Transformação por log (com +1 para evitar log(0))
m1_log <- lm(log(count + 1) ~ spray, data = insects)  # +1 para evitar log(0), caso tenha valores zero
m1_log
library(DHARMa)
plot(simulateResiduals(m1_log))
library(tidyverse)
insects <- insects |>
mutate(count2 = (count^lambda-1)/lambda) |>
mutate(count3 = (sqrt(count)))
hist(insects$count2)
library(gsheet)
estande <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=401662555#gid=401662555")
library(ggplot2)
estande |>
ggplot(aes(trat,nplants))+
geom_point(color = "gray")+
geom_smooth(method = "lm", se = FALSE, color = "black")+
facet_wrap(~ exp)+
theme_minimal()+
labs(x= "% de inóculo da semente",
y= "número de plantas")
exp1 <- estande |>
filter(exp == 1) |>
group_by(trat) |>
summarise(nplants2 = mean(nplants))
exp1 |>
ggplot(aes(trat, nplants2))+
geom_point()+
ylim(20,60)
m_exp1 <- lm(nplants ~ trat  + bloco, data = exp1)
m_exp1 <- lm(nplants ~ trat, data = exp1)
exp1 <- estande |>
filter(exp == 1) |>
group_by(trat) |>
summarise(nplants2 = mean(nplants))
exp1 |>
ggplot(aes(trat, nplants2))+
geom_point()+
ylim(20,60)
m_exp1 <- lm(nplants ~ trat, data = exp1)
summary(m_exp1)
estande
library(ggplot2)
estande |>
ggplot(aes(trat,nplants))+
geom_point(color = "gray")+
geom_smooth(method = "lm", se = FALSE, color = "black")+
facet_wrap(~ exp)+
theme_minimal()+
labs(x= "% de inóculo da semente",
y= "número de plantas")
exp1 <- estande |>
filter(exp == 1) |>
group_by(trat) |>
summarise(nplants2 = mean(nplants))
exp1 |>
ggplot(aes(trat, nplants2))+
geom_point()+
ylim(20,60)
m_exp1 <- lm(nplants ~ trat, data = exp1)
m_exp1 <- lm(nplants ~ trat, data = exp1)
exp1 <- estande |>
filter(exp == 1) |>
group_by(trat) |>
summarise(nplants2 = mean(nplants))
exp1 |>
ggplot(aes(trat, nplants2))+
geom_point()+
ylim(20,60)
m_exp1 <- lm(nplants ~ trat, data = exp1)
m_exp1 <- lm(nplants2 ~ trat, data = exp1)
summary(m_exp1)
m_exp1 <- lm(nplants ~ trat + bloco, data = exp1)
m_exp1 <- lm(nplants2 ~ trat + bloco, data = exp1)
names(estande
)
m_exp1 <- lm(nplants2 ~ trat, data = exp1)
summary(m_exp1)
m_exp1 <- lm(nplants2 ~ trat + bloco, data = exp1)
exp1 <- estande |>
filter(exp == 1) |>
group_by(trat) |>
summarise(nplants2 = mean(nplants))
m_exp1 <- lm(nplants2 ~ trat + bloco, data = exp1)
summary(m_exp1)
# Sem summarise, mantendo 'nplants', 'trat' e 'bloco'
exp1 <- estande |>
filter(exp == 1)
# Modelo com trat e bloco
m_exp1 <- lm(nplants ~ trat + bloco, data = exp1)
summary(m_exp1)
m_exp1 <- lm(nplants2 ~ trat + bloco, data = exp1)
m_exp1 <- lm(nplants2 ~ trat + bloco, data = exp1)
m_exp1 <- lm(nplants ~ trat + bloco, data = exp1)
summary(m_exp1)
exp2 <- estande |>
filter(exp == 2)
m_exp2 <- lm(nplants ~ trat , data = exp2)
summary(m_exp2)
exp3 <- estande |>
filter(exp == 3)
m_exp3 <- lm(nplants ~ trat , data = exp3)
summary(m_exp3)
m_exp1$coefficients #calculando o slop para o experimento
m_exp2$coefficients
m_exp3$coefficients
library(lme4)
m_misto <- lmer(nplants ~ trat + (1  | exp/bloco),
data = estande) #tratamento é o efeito fixo, os experimentos e os blocos são efeitos aleatórios, e os blocos estão dentro dos experimentos
confint(m_misto)
confint(m_misto)
summary(m_misto)
library(car)
car::Anova(m_misto)
library(lme4)
m_misto <- lmer(nplants ~ trat + (1 | exp/bloco),
data = estande)
confint(m_misto)
confint(m_misto)
summary(m_misto)
library(car)
Anova(m_misto)
predict(m_misto, data = estande)
estande |>
ggplot(aes(trat, nplants, color = factor(exp)))+
geom_point()+
#geom_smooth(method = "lm", se = FALSE)+
geom_abline(intercept = 69.74,
slope = -0.568, linewidth = 2)+
geom_abline(intercept = 43, slope = -0.73, linetype = "dashed")+
geom_abline(intercept = 96, slope = -0.40, linetype = "dashed")
fungi <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=465348652#gid=465348652")
library(dplyr)
fungi |>
group_by(code, dose) |>
summarise(germination = mean(germination)) |>
ggplot(aes(dose, germination))+
geom_point()+
geom_line()+
#geom_smooth(se = FALSE)+
facet_wrap(~code)
FGT43 <- fungi |>
group_by(code, dose) |>
summarise(germination = mean(germination)) |>
filter(code == "FGT43")
#install.packages("drc")
library(drc)
m43 <- drm(germination ~dose,
data = FGT43,
fct = LL.3())
m43 <- drm(germination ~ dose,
data = FGT43,
fct = W2.3())
m43 <- drm(germination ~dose,
data = FGT43,
fct = LL.3())
summary(m43)
AIC(m43)
plot(m43)
ED(m43, 50)
AIC(m43) #quanto < o AIC, melhor.
#install.packages("ec50estimator")
library(ec50estimator)
df_ec50 = estimate_EC50(germination ~ dose,
data =fungi,
isolate_col = "code",
strata_col =  c("state"),
interval = "delta",
fct = drc::LL.3())
head(df_ec50)
library(ggplot2)
df_ec50 |>
ggplot(aes(reorder(ID, Estimate), Estimate))+
geom_point()+
coord_flip()
df_ec50 |>
ggplot(aes(reorder(ID, Estimate), Estimate))+ #reordena o ID pelo estimado (menor para maior)
geom_point()+
coord_flip()+
labs(y = "EC50",
x = "Isolado")
df_ec50 |>
ggplot(aes(x = Estimate))+
geom_histogram(bins = 5, color = "white")
df_ec50 |>
ggplot(aes(x = Estimate))+
geom_histogram(bins = 5, color = "white")
library(gsheet)
cr <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=1871397229#gid=1871397229")
cr
library(DT)
datatable(cr)
library(tidyverse)
cr |>
ggplot(aes(lon, lat))+
geom_point()
![](images/clipboard-1046777469.png){style="float right" width="258"}
BR <- ne_countries(country = "Brazil",
returnclass = "sf")
BR |>
ggplot()+
geom_sf(fill="gray90")
