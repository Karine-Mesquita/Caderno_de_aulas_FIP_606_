geom_jitter(width = 0.1)+
facet_grid(moisture ~ irrigation_type)
mildio |>
ggplot(aes(time, sev))+
geom_point(width =0.1)+
facet_grid(irrigation_type ~moisture)
oidio |>
ggplot(aes(time, sev))+
geom_point(width =0.1)+
facet_grid(irrigation_type ~moisture)
oidio |>
filter(irrigation_type %in%c("MS", "MS above canopy", "Overhead")) |>
ggplot(aes(time, sev))+
geom_point()+
facet_grid(moisture ~irrigation_type)
oidio |>
filter(irrigation_type %in%c("MS", "MS above canopy", "Overhead")) |>
ggplot(aes(time, sev))+
geom_point()+
facet_grid(moisture ~ irrigation_type)
#install.packages("epifitter")
library(epifitter)
oidio <- PowderyMildew
oidio |>
filter(irrigation_type  %in% c("MS", "MS above canopy", "Overhead")) |> #filtrando as condições desejadas
ggplot(aes(time, sev*100))+
geom_jitter(width = 0.1)+
facet_grid(moisture ~ irrigation_type)
oidio |>
filter(~ irrigation_type  %in% c("MS", "MS above canopy", "Overhead")) |> #filtrando as condições desejadas
ggplot(aes(time, sev*100))+
geom_jitter(width = 0.1)+
facet_grid(moisture ~ irrigation_type)
oidio |>
filter(irrigation_type  %in% c("MS", "MS above canopy", "Overhead")) |> #filtrando as condições desejadas
ggplot(aes(time, sev*100))+
geom_jitter(width = 0.1)+
facet_grid(moisture ~ irrigation_type)
oidio3 <- oidio |>
group_by(irrigation_type, moisture, block) |>
summarize(AUDPC = AUDPC(time, sev))
oidio |>
filter(irrigation_type  %in% c("MS", "MS above canopy", "Overhead")) |> #filtrando as condições desejadas
ggplot(aes(time, sev*100))+
geom_jitter(width = 0.1)+
facet_grid(moisture ~ irrigation_type)
View(micelial)
View(oidio)
library(epifitter)
oidio <- PowderyMildew
oidio |>
filter(irrigation_type %in% c("MS", "MS above canopy", "Overhead")) |>
ggplot(aes(x = time, y = sev * 100)) +
geom_jitter(width = 0.1) +
facet_grid(moisture ~ irrigation_type)
# Verifique diretamente se a coluna existe
"irrigation_type" %in% names(oidio)
dados_filtrados <- oidio |>
filter(irrigation_type %in% c("MS", "MS above canopy", "Overhead"))
ggplot(dados_filtrados, aes(x = time, y = sev * 100)) +
geom_jitter(width = 0.1) +
facet_grid(moisture ~ irrigation_type)
#install.packages("epifitter")
library(epifitter)
oidio <- PowderyMildew
oidio
oidio |>
ggplot(aes(time, sev))+
geom_point(width = 0.1)+
facet_wrap(~irrigation_type)
oidio |>
filter(irrigation_type  %in% c("MS", "MS above canopy", "Overhead")) |> #filtrando as condições desejadas
ggplot(aes(time, sev*100))+
geom_jitter(width = 0.1)+
facet_grid(moisture ~ irrigation_type)
oidio |>
filter(irrigation_type %in% c("MS", "MS above canopy", "Overhead")) |>
mutate(
irrigation_type = factor(irrigation_type),
moisture = factor(moisture)
) |>
ggplot(aes(x = time, y = sev * 100)) +
geom_jitter(width = 0.1) +
facet_grid(moisture ~ irrigation_type)
library(dplyr)
oidio |>
filter(irrigation_type %in% c("MS", "MS above canopy", "Overhead")) |>
mutate(
irrigation_type = factor(irrigation_type),
moisture = factor(moisture)
) |>
ggplot(aes(x = time, y = sev * 100)) +
geom_jitter(width = 0.1) +
facet_grid(moisture ~ irrigation_type)
oidio |>
filter(irrigation_type  %in% c("MS", "MS above canopy", "Overhead")) |> #filtrando as condições desejadas
ggplot(aes(time, sev*100))+
geom_jitter(width = 0.1)+
facet_grid(moisture ~ irrigation_type)
oidio |>
filter(irrigation_type  %in% c("MS", "MS above canopy", "Overhead")) |> #filtrando as condições desejadas
ggplot(aes(time, sev*100))+
geom_jitter(width = 0.1)+
facet_grid(moisture ~ irrigation_type)
oidio |>
ggplot(aes(time, sev))+
geom_point(width =0.1)+
facet_grid(irrigation_type ~moisture)
oidio |>
filter(irrigation_type %in%c("MS", "MS above canopy", "Overhead")) |>
ggplot(aes(time, sev))+
geom_point()+
facet_grid(moisture ~ irrigation_type)
oidio |>
ggplot(aes(time, sev))+
geom_point(width =0.1)+
facet_grid(irrigation_type ~moisture)
oidio |>
filter(irrigation_type  %in% c("MS", "MS above canopy", "Overhead")) |> #filtrando as condições desejadas
ggplot(aes(time, sev*100))+
geom_jitter(width = 0.1)+
facet_grid(moisture ~ irrigation_type)
library(agricolae)
oidio1 |>
group_by(irrigation_type, moisture, block) |>
summarise(AUDPC = AUDPC(time, sev))
oidio |>
group_by(irrigation_type, moisture, block) |>
summarise(AUDPC = AUDPC(time, sev))
library(ggpubr)
oidio2 <- oidio |>
group_by(irrigation_type, moisture, block) |>
summarise(AUDPC = AUDPC(time, sev))
oidio2 <- oidio |>
group_by(irrigation_type, moisture, block) |>
summarise(AUDPC = AUDPC(time, sev))
oidio3 <- oidio |>
filter(irrigation_type %in% c("MS", "MS above canopy", "Overhead")) |>
group_by(irrigation_type, moisture, block) |>
summarise(AUDPC = AUDPC(time, sev))
oidio3 |>
ggplot(aes(irrigation_type,
AUDPC, color = moisture))+
geom_point(size = 2)+
facet_wrap(~moisture)+
scale_y_continuous(limits = c(0,20))
oidio3 <- oidio |>
filter(irrigation_type %in% c("MS", "MS above canopy", "Overhead")) |>
group_by(irrigation_type, moisture, block) |>
summarise(AUDPC = AUDPC(time, sev))
oidio3 |>
ggplot(aes(irrigation_type,
AUDPC, color = moisture))+
geom_point(size = 2)+
facet_wrap(~moisture)+
scale_y_continuous(limits = c(0,20))
oidio3 |>
filter(irrigation_type  %in% c("MS", "MS above canopy", "Overhead")) |>
ggplot(aes(irrigation_type, AUDPC, color = moisture))+
geom_point(width = 0.1)+
#facet_wrap(~ moisture)+
scale_y_continuous(limits = c(0,20))
oidio3 |>
filter(irrigation_type  %in% c("MS", "MS above canopy", "Overhead")) |>
ggplot(aes(irrigation_type, AUDPC, color = moisture))+
geom_point(width = 0.1)+
#facet_wrap(~ moisture)+
scale_y_continuous(limits = c(0,20))
oidio3 <- oidio |>
filter(irrigation_type %in% c("MS", "MS above canopy", "Overhead")) |>
group_by(irrigation_type, moisture, block) |>
summarise(AUDPC = AUDPC(time, sev))
oidio3 |>
ggplot(aes(irrigation_type,
AUDPC, color = moisture))+
geom_point(size = 2)+
facet_wrap(~moisture)+
scale_y_continuous(limits = c(0,20))
oidio3 |>
filter(irrigation_type  %in% c("MS", "MS above canopy", "Overhead")) |>
ggplot(aes(irrigation_type, AUDPC, color = moisture))+
geom_point(width = 0.1)+
#facet_wrap(~ moisture)+
scale_y_continuous(limits = c(0,20))
oidio3 |>
ggplot(aes(irrigation_type,
AUDPC, color = moisture))+
geom_point(size = 2)+
scale_y_continuous(limits = c(0,20))
oidio3 |>
ggplot(aes(irrigation_type,
AUDPC, color = moisture))+
geom_point(size = 2)+
facet_wrap(~moisture)+
scale_y_continuous(limits = c(0,20))
model_oidio <- lm(AUDPC ~ irrigation_type * moisture,
data = oidio3)
#Realizando a ANOVA fatorial
anov_oidio <- lm(sev ~ irrigation_type*moisture, data = oidio)
anova(anov_oidio)
#Realizando a ANOVA fatorial para AUDPC
oidio4 <- oidio3 |>
filter(irrigation_type  %in% c("MS", "MS above canopy", "Overhead"))
library(gsheet)
fungicida_vaso <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=2023059672#gid=2023059672")
fungicida_vaso
#Plotar o gráfico para análise visual dos dados
library(ggplot2)
fungicida_vaso |>
ggplot(aes(factor(dose), severity*100))+ #usamos factor para transformar dose em fator
geom_jitter(width = 0.1)+
facet_wrap(~treat)
#Testar se o efeito do tratamento depende da dose.
m_anti <- lm(severity ~ treat*dose, data = fungicida_vaso)
anova(m_anti)
library(DHARMa)
plot(simulateResiduals(m_anti))
#como não há problemas, pode seguir com o teste de comparação de médias
#comando para decompor as médias dos tratamentos dentro das doses.
media_anti <- emmeans(m_anti, ~ treat |dose)
media_anti #mostra as médias (no artigo, apresentar em tabela)
library(multcomp)
cld(media_anti) #mostrar as diferenças estatísticas para letras das colunas (maiusculas).
#decompões as médias de cada dose dentro dos tratamentos.
#mostrar as diferenças estatísticas para letras na linha (minusculas).
media_anti <- emmeans(m_anti, ~ dose |treat)
media_anti
cld(media_anti)
#para o CV (coeficiente de variação do modelo) da tabela
library(agricolae)
cv.model(m_anti)
#caso não tivesse inyteração, se fosse não siguinificativo, observar os efeitos simples
p1 <- fungicida_vaso |>
ggplot(aes(factor(dose),severity*100))+
geom_jitter(width =0.1)
p1
p2 <- fungicida_vaso |>
ggplot(aes(factor(treat),severity*100))+
geom_jitter(width =0.1)
p2
#Unindo os dois gráficos para comparação
library(patchwork)
p1+p2
#função auxiliar para visualizar se a interação é siguinificativa ou não
interaction.plot(fungicida_vaso$treat, fungicida_vaso$dose, fungicida_vaso$severity, data = fungicida_vaso)
#quando as linhas não são paralelas quer dizer que a interação é siguinificativa #quando são paralelas, interação não siguinificativa
```
#função auxiliar para visualizar se a interação é siguinificativa ou não
interaction.plot(fungicida_vaso$treat, fungicida_vaso$dose, fungicida_vaso$severity, data = fungicida_vaso)
#quando as linhas não são paralelas quer dizer que a interação é siguinificativa #quando são paralelas, interação não siguinificativa
```
#quando as linhas não são paralelas quer dizer que a interação é siguinificativa #quando são paralelas, interação não siguinificativa
```
#função auxiliar para visualizar se a interação é siguinificativa ou não
interaction.plot(fungicida_vaso$treat, fungicida_vaso$dose, fungicida_vaso$severity, data = fungicida_vaso)
p1+p2
#como não há problemas, pode seguir com o teste de comparação de médias
#comando para decompor as médias dos tratamentos dentro das doses.
library(emmeans)
library(gsheet)
library(ggplot2)
gsheet2tbl("https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=866852711#gid=866852711")
campo <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=866852711#gid=866852711")
campo
campo |>
ggplot(aes(TRAT, PROD))+
geom_jitter(width = 0.1)+
stat_summary(
fun.data = "mean_cl_boot",
colour = "magenta", width = 0.3)
campo$TRAT <- factor(campo$TRAT)
campo$BLOCO <- factor(campo$BLOCO)
m_campo <- lm(PROD ~ BLOCO + TRAT, data = campo)
anova (m_campo)
plot(m_campo)
means_campo <- emmeans(m_campo, ~TRAT)
means_campo
plot(means_campo)
#teste de comparação multipla
library(multcomp)
cld(means_campo)
pwpp(means_campo)
m_campo <- lm(FER ~ BLOCO + TRAT, data = campo)
anova (m_campo)
#transforma
m_campo <- lm(log(FER) ~ BLOCO + TRAT, data = campo)
anova (m_campo)
means_campo <- emmeans(m_campo, ~TRAT, type = "response")
means_campo
plot(means_campo)
library(DHARMa)
simulateResiduals(m_campo)
plot(simulateResiduals(m_campo))
library(emmeans)
#teste de comparação multipla
library(multcomp)
cld(means_campo)
pwpp(means_campo)
library(agricolae)
cv.model(m_campo)
#script limpo
m_campo <- lm(log(FER) ~ BLOCO + TRAT, data = campo)
anova (m_campo)
library(DHARMa)
simulateResiduals(m_campo)
plot(simulateResiduals(m_campo))
library(emmeans)
means_campo <- emmeans(m_campo, ~TRAT, type = "response")
means_campo
plot(means_campo)
#teste de comparação multipla
library(multcomp)
cld(means_campo)
pwpp(means_campo)
library(agricolae)
cv.model(m_campo)
gsheet2tbl("https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=866852711#gid=866852711")
library(gsheet)
library(ggplot2)
library(readxl)
library(tidyverse)
library(Hmisc)
gsheet2tbl("https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=866852711#gid=866852711")
campo <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=866852711#gid=866852711")
campo
campo |>
ggplot(aes(TRAT, PROD))+
geom_jitter(width = 0.1)+
stat_summary(
fun.data = "mean_cl_boot",
colour = "magenta", width = 0.3)
campo |>
mutate (TRAT = factor(TRAT)) |>
ggplot(aes(TRAT, PROD))+
geom_jitter(width = 0.2)+
stat_summary(
fun.data = "mean_cl_boot", #dá a média dos dados no gráfico
colour = "red", width = 0.3
)
campo$TRAT <- factor(campo$TRAT)
campo$BLOCO <- factor(campo$BLOCO)
#Anova
m_campo <- lm(PROD ~ BLOCO + TRAT, data = campo)
anova (m_campo)
plot(m_campo)
plot(m_campo)
library(emmeans)
#verificar os pressuposto de normalidade
library(DHARMa)
simulateResiduals(m_campo)
plot(simulateResiduals(m_campo))
library(emmeans)
#verificar os pressuposto de normalidade
library(DHARMa)
simulateResiduals(m_campo)
plot(simulateResiduals(m_campo))
library(emmeans)
means_campo <- emmeans(m_campo, ~TRAT)
means_campo
plot(means_campo)
library(emmeans)
means_campo <- emmeans(m_campo, ~TRAT)
means_campo
plot(means_campo)
library(emmeans)
means_campo <- emmeans(m_campo, ~TRAT)
means_campo
plot(means_campo)
#teste de comparação multipla
library(multcomp)
cld(means_campo)
plot(means_campo)
pwpp(means_campo)
cld(means_campo)
pwpp(means_campo)
pwpp(means_campo)
pwpp(means_campo)
pwpp(means_campo)
pwpm(means_campo)
#para ferrugem
#Anova
f_campo <- lm(FER ~ BLOCO + TRAT, data = campo)
anova (m_campo)
#teste de pressupostos de homogeneidade e normalidade
plot(simulateResiduals(f_campo))
f_campo_t <- lm(log(FER) ~ BLOCO + TRAT, data = campo)
anova (f_campo_t)
means_campo <- emmeans(m_campo, ~TRAT, type = "response")
means_campo
means_f_campo_t <- emmeans(f_campo_t, ~TRAT, type = "response")
#utiliza-se a função type = response para sinalizar que os dados foram transformados, mas que os resultados devem ser retornados em valores reais
means_campo_f_campo_t
#utiliza-se a função type = response para sinalizar que os dados foram transformados, mas que os resultados devem ser retornados em valores reais
means_f_campo_t
plot(means_campo)
library(DHARMa)
simulateResiduals(m_campo)
plot(simulateResiduals(m_campo))
library(emmeans)
#teste de comparação multipla
library(multcomp)
plot(means_f_campo_t)
simulateResiduals(means_f_campo_t)
plot(simulateResiduals(means_f_campo_t))
#utiliza-se a função type = response para sinalizar que os dados foram transformados, mas que os resultados devem ser retornados em valores reais
means_f_campo_t
plot(means_f_campo_t)
library(DHARMa)
simulateResiduals(means_f_campo_t)
anova (f_campo)
#para ferrugem
#Anova
f_campo <- lm(FER ~ BLOCO + TRAT, data = campo)
anova (f_campo)
#teste de pressupostos de homogeneidade e normalidade
plot(simulateResiduals(f_campo))
f_campo_t <- lm(log(FER) ~ BLOCO + TRAT, data = campo)
anova (f_campo_t)
means_f_campo_t <- emmeans(f_campo_t, ~TRAT, type = "response")
#utiliza-se a função type = response para sinalizar que os dados foram transformados, mas que os resultados devem ser retornados em valores reais
means_f_campo_t
plot(means_f_campo_t)
library(DHARMa)
simulateResiduals(means_f_campo_t)
#utiliza-se a função type = response para sinalizar que os dados foram transformados, mas que os resultados devem ser retornados em valores reais
means_f_campo_t
plot(means_f_campo_t)
library(DHARMa)
simulateResiduals(means_f_campo_t)
#teste de pressupostos de homogeneidade e normalidade
plot(simulateResiduals(f_campo))
f_campo <- lm(log(FER) ~ BLOCO + TRAT, data = campo)
anova (f_campo_t)
anova (f_campo)
f_campo <- lm(log(FER) ~ BLOCO + TRAT, data = campo)
anova (f_campo)
means_f_campo <- emmeans(f_campo, ~TRAT, type = "response")
#utiliza-se a função type = response para sinalizar que os dados foram transformados, mas que os resultados devem ser retornados em valores reais
means_f_campo
plot(means_f_campo)
#teste de comparação multipla
library(emmeans)
#teste de comparação multipla
library(multcomp)
cld(means_f_campo)
cld(means_f_campo, Letters = letters)
#adicionar o comando Letters = letters, retorna letras ao invés de números no resultado do teste de médias
pwpp(means_f_campo)
pwpm(means_f_campo)
library(agricolae)
cv.model(means_f_campo)
library(agricolae)
cv.model(means_f_campo)
cv.model(f_campo)
gsheet2tbl("https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=1345524759#gid=1345524759")
milho <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=1345524759#gid=1345524759")
milho
milho |>
ggplot(aes(hybrid, index, color = method))+
geom_jitter(width = 0.1)+
coord_flip()+
facet_wrap(~ method)
#para modelos mistos (introduzir fator aleatório no modelo) deve ser utilizado o pacote lme4.
#install.packages("lme4")
library(lme4)
library(dplyr)
milho$hybrid_block <- interaction(milho$hybrid, milho$block)
car::Anova(m_milho)
milho$hybrid_block <- interaction(milho$hybrid, milho$block)
milho |>
mutate(hybrid_block = interaction(hybrid, block))
m_milho <- lmer(index ~hybrid*method+
(1 | block:hybrid_block), data = milho)
car::Anova(m_milho)
#modelo misto
m_milho <- lmer(index ~ hybrid*method+
(1 | block:hybrid_block), data = milho)
car::Anova(m_milho)
plot(simulateResiduals(m_milho))
media_milho <- emmeans(m_milho, ~ hybrid | method)
media_milho
cld(media_milho, Letters = letters)
plot(simulateResiduals(m_milho))
media_milho <- emmeans(m_milho, ~ method | hybrid)
media_milho
cld(media_milho, Letters = letters)
m_milho2 <- lmer(yeld ~hybrid*method+
(1 | block:hybrid_block), data = milho)
m_milho2 <- lmer(yield ~hybrid*method+
(1 | block:hybrid_block), data = milho)
car::Anova(m_milho)
plotSimulatedResiduals(m_milho)
#relação yeld e index
milho |>
ggplot(aes(index, yield))+
geom_point()+
geom_smooth(method = "lm")
media_milho <- emmeans(m_milho, ~ hybrid | method)
cld(media_milho, Letters = letters)
media_milho2 <- emmeans(m_milho, ~ method | hybrid)
cld(media_milho2, Letters = letters)
#relação yeld e index
milho |>
ggplot(aes(index, yield))+
geom_point()+
geom_smooth(method = "lm")
#para análise de correlação
cor.test(milho$index, milho$yield)
cor1 <- cor(milho$index, milho$yield)
cor1*cor1*100
#acima, duas maneiras de  determinar o coeficiente de correlação
cor1*cor1*100
